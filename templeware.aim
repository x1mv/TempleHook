local NotifyLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vKhonshu/intro/main/ui"))()
local GN = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
NotifyLib.prompt('templeware', 'loading', 3)
wait(1)
NotifyLib.prompt('templeware', 'loaded', 10)
NotifyLib.prompt('templeware', 'game: '.. GN, 3)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/Ido1212/Mr.Beast.ccV2/main/CLASHROYALE.COM"))()
local themes = {
    SchemeColor = Color3.fromRGB(127, 35, 232),
    Background = Color3.fromRGB(0, 0, 0),
    Header = Color3.fromRGB(0, 0, 0),
    TextColor = Color3.fromRGB(255,255,255),
    ElementColor = Color3.fromRGB(20, 20, 20)
}
local Window = Library.CreateLib("templeware", themes)

local sound = Instance.new("Sound", game.Workspace)
sound.SoundId = "rbxassetid://8819783960"

if not sound.IsLoaded then
	sound.Loaded:wait()
end

local sound1 = Instance.new("Sound", game.Workspace)
sound1.SoundId = "rbxassetid://8819782435"

if not sound1.IsLoaded then
	sound1.Loaded:wait()
end
local Tab = Window:NewTab("silent lock")

local Section = Tab:NewSection("silent")

Section:NewButton("enable", "", function(state)
_G.KEY = "q"
_G.PART = "HumanoidRootPart"
_G.PRED = 0.125
_G.NOTIF = false
_G.ENABLED = true
_G.AIR = false
_G.AIRpart = "LowerTorso"
_G.View = false
getgenv().BenNotif = false
_G.DOT = true
_G.BOX = true
local CC = game:GetService"Workspace".CurrentCamera
    local Plr
    local enabled = falseWD
    --local accomidationfactor = 0.13880--
    local mouse = game.Players.LocalPlayer:GetMouse()
    local placemarker = Instance.new("Part", game.Workspace)

        function makemarker(Parent, Adornee, Color, Size, Size2)
        local e = Instance.new("BillboardGui", Parent)
        e.Name = "PP"
        e.Adornee = Adornee
        e.Size = UDim2.new(Size, Size2, Size, Size2)
        e.AlwaysOnTop = _G.DOT
        local a = Instance.new("Frame", e)
        if _G.DOT == true then
        a.Size = UDim2.new(1, 0, 1, 0)
        else
        a.Size = UDim2.new(0, 0, 0, 0)
        end
        if _G.DOT == true then
        a.Transparency = 0
        a.BackgroundTransparency = 0
        else
        a.Transparency = 1
        a.BackgroundTransparency = 1
        end
        a.BackgroundColor3 = Color
        local g = Instance.new("UICorner", a)
        if _G.DOT == false then
        g.CornerRadius = UDim.new(0, 0)
        else
        g.CornerRadius = UDim.new(50, 50) 
        end
        return(e)
    end

    
    local data = game.Players:GetPlayers()
    function noob(player)
        local character
        repeat wait() until player.Character
        local handler = makemarker(guimain, player.Character:WaitForChild(_G.PART), Color3.fromRGB(238, 130, 238), 0.3, 3)
        handler.Name = player.Name
        player.CharacterAdded:connect(function(Char) handler.Adornee = Char:WaitForChild(_G.PART) end)


        spawn(function()
            while wait() do
                if player.Character then
                    TextLabel.Text = player.Name..tostring(player:WaitForChild("leaderstats").Wanted.Value).." | "..tostring(math.floor(player.Character:WaitForChild("Humanoid").Health))
                end
            end
        end)
    end

    for i = 1, #data do
        if data[i] ~= game.Players.LocalPlayer then
            noob(data[i])
        end
    end

    game.Players.PlayerAdded:connect(function(Player)
        noob(Player)
    end)

    getgenv().spawn(function()
        placemarker.Anchored = true
        placemarker.CanCollide = false
        if _G.BOX == true then
        placemarker.Size = Vector3.new(7, 7, 7)
        else
        placemarker.Size = Vector3.new(0, 0, 0)
        end
        placemarker.Transparency = 0.2
        if _G.DOT then
        makemarker(placemarker, placemarker, Color3.fromRGB(45, 80, 150), 0.3, 3)
        end
    end)

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(k)
        if k == _G.KEY and _G.ENABLED then
            if _G.View then
	game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
end
            if enabled == true then
                enabled = false
                       if getgenv().BenNotif then
    sound1:Play()
end
                if _G.NOTIF == true then
                    Plr = getClosestPlayerToCursor()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "templeware";
                    Text = "lock disabled",
                    Duration = 3
                })
            end
            else
                Plr = getClosestPlayerToCursor()
                if _G.View then
                        	game.Workspace.CurrentCamera.CameraSubject = Plr.Character
                end
                    	if getgenv().BenNotif then
                            sound:Play()
                        end
                enabled = true
                if _G.NOTIF == true then
 
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "templeware";
                        Text = "locked"..tostring(Plr.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
 
                end
            end
        end
    end)
    function getClosestPlayerToCursor()
        local closestPlayer
        local shortestDistance = math.huge

        for i, v in pairs(game.Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
                local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
        return closestPlayer
    end

    game:GetService"RunService".Stepped:connect(function()
        if enabled and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
            placemarker.CFrame = CFrame.new(Plr.Character[_G.PART].Position + (Plr.Character[_G.PART].Velocity * _G.PRED))
        else
            placemarker.CFrame = CFrame.new(0, 9999, 0)
        end
    end)

    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(...)
        local args = {...}
        if enabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
            args[3] = (Plr.Character[_G.PART].Position + (Plr.Character[_G.PART].Velocity * _G.PRED))
            return old(unpack(args))
        end
        return old(...)
    end)
    if _G.AIR == true then

        if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
            _G.AIRpart = "RightFoot"
        else
            Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
                if new == Enum.HumanoidStateType.Freefall then
                _G.AIRpart = "RightFoot"
                else
                    _G.AIRpart = "LowerTorso"
                end
            end)
        end
    end
end)
Section:NewTextBox("key", "", function(txt)
	_G.KEY = txt
end)
Section:NewTextBox("prediction", "", function(txt)
	_G.PRED = txt
end)
Section:NewDropdown("aim part", "", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}, function(arg)
    _G.PART = ""..arg
end)
local Section = Tab:NewSection("toggles")
Section:NewToggle("notification", "", function(state)
    _G.NOTIF = state
end)
Section:NewToggle("ben notif sound", "", function(state)
    getgenv().BenNotif = state
end)
Section:NewToggle("view player on lock", "", function(state)
    _G.View = state
end)
Section:NewToggle("airshot function", "", function(state)
    _G.AIR = state
end)
Section:NewDropdown("airshot part", "", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}, function(arg)
    _G.AIRpart = ""..arg
end)
local Camlock = Window:NewTab("camlock")

local Ik = Camlock:NewSection("camlock")

Ik:NewButton("enable", "", function(state)
 getgenv().AimPart = "HumanoidRootPart" -- For R15 Games: {UpperTorso, LowerTorso, HumanoidRootPart, Head} | For R6 Games: {Head, Torso, HumanoidRootPart}  
    getgenv().AimlockKey = "q"
    getgenv().AimRadius = 30 -- How far away from someones character you want to lock on at
    getgenv().ThirdPerson = true 
    getgenv().FirstPerson = true
    getgenv().TeamCheck = false -- Check if Target is on your Team (True means it wont lock onto your teamates, false is vice versa) (Set it to false if there are no teams)
    getgenv().PredictMovement = true -- Predicts if they are moving in fast velocity (like jumping) so the aimbot will go a bit faster to match their speed 
    getgenv().PredictionVelocity = 7.5
    getgenv().Smoothness = false
    getgenv().SmoothnessAmount = 0.022
    getgenv().AOR = false
    getgenv().AORpart = "LowerTorso"
    local Players, Uis, RService, SGui = game:GetService"Players", game:GetService"UserInputService", game:GetService"RunService", game:GetService"StarterGui";
    local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
    local Aimlock, MousePressed, CanNotify = true, false, false;
    local AimlockTarget;
    local OldPre;
    

    
    getgenv().WorldToViewportPoint = function(P)
        return Camera:WorldToViewportPoint(P)
    end
    
    getgenv().WorldToScreenPoint = function(P)
        return Camera.WorldToScreenPoint(Camera, P)
    end
    
    getgenv().GetObscuringObjects = function(T)
        if T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild("Head") then 
            local RayPos = workspace:FindPartOnRay(RNew(
                T[getgenv().AimPart].Position, Client.Character.Head.Position)
            )
            if RayPos then return RayPos:IsDescendantOf(T) end
        end
    end
    
    getgenv().GetNearestTarget = function()
        -- Credits to whoever made this, i didnt make it, and my own mouse2plr function kinda sucks
        local players = {}
        local PLAYER_HOLD  = {}
        local DISTANCES = {}
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= Client then
                table.insert(players, v)
            end
        end
        for i, v in pairs(players) do
            if v.Character ~= nil then
                local AIM = v.Character:FindFirstChild("Head")
                if getgenv().TeamCheck == true and v.Team ~= Client.Team then
                    local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                elseif getgenv().TeamCheck == false and v.Team == Client.Team then 
                    local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        end
        
        if unpack(DISTANCES) == nil then
            return nil
        end
        
        local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
        if L_DISTANCE > getgenv().AimRadius then
            return nil
        end
        
        for i, v in pairs(PLAYER_HOLD) do
            if v.diff == L_DISTANCE then
                return v.plr
            end
        end
        return nil
    end
    
    Mouse.KeyDown:Connect(function(a)
        if not (Uis:GetFocusedTextBox()) then 
            if a == AimlockKey and AimlockTarget == nil then
                pcall(function()
                    if MousePressed ~= true then MousePressed = true end 
                    local Target;Target = GetNearestTarget()
                    if Target ~= nil then 
                        AimlockTarget = Target
                    end
                end)
            elseif a == AimlockKey and AimlockTarget ~= nil then
                if AimlockTarget ~= nil then AimlockTarget = nil end
                if MousePressed ~= false then 
                    MousePressed = false 
                end
            end
        end
    end)
    
    RService.RenderStepped:Connect(function()
        if getgenv().ThirdPerson == true and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 or (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == true and getgenv().FirstPerson == false then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == false and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        end
        if Aimlock == true and MousePressed == true then 
            if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then 
                if getgenv().FirstPerson == true then
                    if CanNotify == true then
                        if getgenv().PredictMovement == true then
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                                
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                            end
                        elseif getgenv().PredictMovement == false then 
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)

                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                            end
                        end
                    end
                end
            end
        end
            if getgenv().AOR == true then

        if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
            getgenv().AORpart = "RightFoot"
        else
            Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
                if new == Enum.HumanoidStateType.Freefall then
                getgenv().AORpart = "RightFoot"
                else
                    getgenv().AORpart = "LowerTorso"
                end
            end)
        end
    end
    end)
    end)
Ik:NewTextBox("key", "", function(txt)
	getgenv().AimlockKey = txt
end)
Ik:NewTextBox("prediction", "", function(txt)
	getgenv().PredictionVelocity = txt
end)
Ik:NewDropdown("aim part", "", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}, function(arg)
    getgenv().AimPart = ""..arg
end)
local Ik = Camlock:NewSection("airshot function")

Ik:NewToggle("airshot function", "", function(state)
    getgenv().AOR = state
end)

Ik:NewDropdown("airshot part", "", {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}, function(arg)
    getgenv().AORpart = ""..arg
end)
local Ik = Camlock:NewSection("smoothing (streamable)")

Ik:NewToggle("smoothing", "", function(state)
    getgenv().Smoothness = state
end)
Ik:NewTextBox("smooth amount", "", function(txt)
	getgenv().SmoothnessAmount = txt
end)
local OJA = Window:NewTab("chams")
local PP = OJA:NewSection("bodychams")
PP:NewButton("body chams", "", function(callback)
        while wait(1) do
        game.Players.LocalPlayer.Character.LeftHand.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightHand.Material = "ForceField"
        game.Players.LocalPlayer.Character.LeftLowerArm.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightLowerArm.Material = "ForceField"
        game.Players.LocalPlayer.Character.LeftUpperArm.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightUpperArm.Material = "ForceField"
        game.Players.LocalPlayer.Character.LeftFoot.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightFoot.Material = "ForceField"
        game.Players.LocalPlayer.Character.LeftLowerLeg.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightLowerLeg.Material = "ForceField"
        game.Players.LocalPlayer.Character.UpperTorso.Material = "ForceField"
        game.Players.LocalPlayer.Character.LowerTorso.Material = "ForceField"
        game.Players.LocalPlayer.Character.LeftUpperLeg.Material = "ForceField"
        game.Players.LocalPlayer.Character.RightUpperLeg.Material = "ForceField"
        game.Players.LocalPlayer.Character.Head.Material = "ForceField"
        end
end)

PP:NewColorPicker("bodycham color", "", Color3.fromRGB(0,0,0), function(color)
    game.Players.LocalPlayer.Character.LeftHand.Color = color
    game.Players.LocalPlayer.Character.RightHand.Color = color
    game.Players.LocalPlayer.Character.LeftLowerArm.Color = color
    game.Players.LocalPlayer.Character.RightLowerArm.Color = color
    game.Players.LocalPlayer.Character.LeftUpperArm.Color = color
    game.Players.LocalPlayer.Character.RightUpperArm.Color = color
    game.Players.LocalPlayer.Character.LeftFoot.Color = color
    game.Players.LocalPlayer.Character.RightFoot.Color = color
    game.Players.LocalPlayer.Character.LeftLowerLeg.Color = color
    game.Players.LocalPlayer.Character.RightLowerLeg.Color = color
    game.Players.LocalPlayer.Character.UpperTorso.Color = color
    game.Players.LocalPlayer.Character.LowerTorso.Color = color
    game.Players.LocalPlayer.Character.LeftUpperLeg.Color = color
    game.Players.LocalPlayer.Character.RightUpperLeg.Color = color
    game.Players.LocalPlayer.Character.Head.Color = color
end)
local GUI = Window:NewTab("gui")

local Al = GUI:NewSection("toggle gui")

Al:NewKeybind("gui keybind", "", Enum.KeyCode.RightShift, function()
    Library.ToggleUI()
end)


local cmds = Drawing.new("Text")
cmds.Visible = true
cmds.Size = 16
cmds.Color = Color3.fromRGB(127, 35, 232)
cmds.Text = "templeware"
cmds.Font = Drawing.Fonts.Plex
cmds.Outline = true
cmds.OutlineColor = Color3.new(.1,.1,.1)
cmds.Position = Vector2.new((size.X - a.TextBounds.X) - 10, (size.Y - a.TextBounds.Y) - 25)
